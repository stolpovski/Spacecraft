//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Mir/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Thrusters"",
            ""id"": ""686eea95-8068-4b17-aa45-3d2d06e87b7d"",
            ""actions"": [
                {
                    ""name"": ""Bottom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b15543f6-4504-4c7b-8e13-4ebc383abeff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e1efdb10-2d29-4735-bda7-3da128f5d1b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1e9a8b7-9941-44d4-9e05-891214a3f45b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3de22fa2-3a76-476d-9869-2dddf1fea385"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""003f593d-431c-4b8b-87b7-4516a83198d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Thrusters
        m_Thrusters = asset.FindActionMap("Thrusters", throwIfNotFound: true);
        m_Thrusters_Bottom = m_Thrusters.FindAction("Bottom", throwIfNotFound: true);
        m_Thrusters_Left = m_Thrusters.FindAction("Left", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Thrusters
    private readonly InputActionMap m_Thrusters;
    private List<IThrustersActions> m_ThrustersActionsCallbackInterfaces = new List<IThrustersActions>();
    private readonly InputAction m_Thrusters_Bottom;
    private readonly InputAction m_Thrusters_Left;
    public struct ThrustersActions
    {
        private @Controls m_Wrapper;
        public ThrustersActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bottom => m_Wrapper.m_Thrusters_Bottom;
        public InputAction @Left => m_Wrapper.m_Thrusters_Left;
        public InputActionMap Get() { return m_Wrapper.m_Thrusters; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThrustersActions set) { return set.Get(); }
        public void AddCallbacks(IThrustersActions instance)
        {
            if (instance == null || m_Wrapper.m_ThrustersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThrustersActionsCallbackInterfaces.Add(instance);
            @Bottom.started += instance.OnBottom;
            @Bottom.performed += instance.OnBottom;
            @Bottom.canceled += instance.OnBottom;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
        }

        private void UnregisterCallbacks(IThrustersActions instance)
        {
            @Bottom.started -= instance.OnBottom;
            @Bottom.performed -= instance.OnBottom;
            @Bottom.canceled -= instance.OnBottom;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
        }

        public void RemoveCallbacks(IThrustersActions instance)
        {
            if (m_Wrapper.m_ThrustersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IThrustersActions instance)
        {
            foreach (var item in m_Wrapper.m_ThrustersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThrustersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ThrustersActions @Thrusters => new ThrustersActions(this);
    public interface IThrustersActions
    {
        void OnBottom(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
}
